<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aimin-Wang</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-31T12:16:03.340Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aimin Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人脸识别opencv和python</title>
    <link href="http://yoursite.com/2018/03/31/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%ABopencv%E5%92%8Cpython/"/>
    <id>http://yoursite.com/2018/03/31/人脸识别opencv和python/</id>
    <published>2018-03-31T09:51:03.000Z</published>
    <updated>2018-03-31T12:16:03.340Z</updated>
    
    <content type="html"><![CDATA[<p>首先、来两张帅帅的识别效果图：<br><img src="http://img.blog.csdn.net/20180331201543173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="目标总览："><a href="#目标总览：" class="headerlink" title="目标总览："></a><strong>目标总览：</strong></h2><p> 一、 Haar特征分类器介绍<br>二、detectMultiScale函数<br>三、python OpenCV 解决人脸识别报错<br>四、识别框的形状**<br>五、代码实现</p><a id="more"></a><hr><p><img src="http://img.blog.csdn.net/20170918205338803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="一、Haar特征分类器介绍"><a href="#一、Haar特征分类器介绍" class="headerlink" title="一、Haar特征分类器介绍"></a><strong>一、Haar特征分类器介绍</strong></h2><p>Haar特征分类器就是一个XML文件，该文件中会描述人体各个部位的Haar特征值。包括人脸、眼睛、嘴唇等等。<br>Haar特征分类器存放目录：OpenCV安装目录中的\data\ haarcascades目录下，opencv2.4.8版本下的Haar特征分类器如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">haarcascade_eye.xml</span><br><span class="line">haarcascade_eye_tree_eyeglasses.xml</span><br><span class="line">haarcascade_frontalface_alt.xml</span><br><span class="line">haarcascade_frontalface_alt_tree.xml</span><br><span class="line">haarcascade_frontalface_alt2.xml</span><br><span class="line">haarcascade_frontalface_default.xml</span><br><span class="line">haarcascade_fullbody.xml</span><br><span class="line">haarcascade_lefteye_2splits.xml</span><br><span class="line">haarcascade_lowerbody.xml</span><br><span class="line">haarcascade_mcs_eyepair_big.xml</span><br><span class="line">haarcascade_mcs_eyepair_small.xml</span><br><span class="line">haarcascade_mcs_leftear.xml</span><br><span class="line">haarcascade_mcs_lefteye.xml</span><br><span class="line">haarcascade_mcs_mouth.xml</span><br><span class="line">haarcascade_mcs_nose.xml</span><br><span class="line">haarcascade_mcs_rightear.xml</span><br><span class="line">haarcascade_mcs_righteye.xml</span><br><span class="line">haarcascade_mcs_upperbody.xml</span><br><span class="line">haarcascade_profileface.xml</span><br><span class="line">haarcascade_righteye_2splits.xml</span><br><span class="line">haarcascade_smile.xml</span><br><span class="line">haarcascade_upperbody.xml</span><br></pre></td></tr></table></figure><p>根据命名就可以很快知道各个分类器的用途。</p><p>其中：haarcascade_frontalface_alt.xml与haarcascade_frontalface_alt2.xml都是人脸识别的Haar特征分类器了。</p><h2 id="二、detectMultiScale函数"><a href="#二、detectMultiScale函数" class="headerlink" title="二、detectMultiScale函数"></a><strong>二、detectMultiScale函数</strong></h2><p>cvHaarDetectObjects是opencv1中的函数，opencv2中人脸检测使用的是 detectMultiScale函数。它可以检测出图片中所有的人脸。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rects = cascade.detectMultiScale(img,1.3, 6,cv2.CASCADE_SCALE_IMAGE,(20,20))</span><br></pre></td></tr></table></figure><p>img–待检测图片，一般为灰度图像加快检测速度；<br>rects–被检测物体的矩形框向量组；<br>其他参数–调节识别程度……</p><h2 id="三、python-OpenCV-解决人脸识别报错"><a href="#三、python-OpenCV-解决人脸识别报错" class="headerlink" title="三、python OpenCV 解决人脸识别报错"></a><strong>三、python OpenCV 解决人脸识别报错</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误提示：</span><br><span class="line">cv2.error: C:\builds\master_PackSlaveAddon-win64-vc12-static\opencv\modules\objdetect\src\cascadedetect.cpp:1639: error: (-215) !empty() in function cv::CascadeClassifier::detectMultiScale</span><br></pre></td></tr></table></figure><p>到底是什么问题呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_cascade=cv2.CascadeClassifier(&apos;haarcascade_frontalface_default.xml&apos;)</span><br></pre></td></tr></table></figure><p>我们在这段代码后面，加上下面这句话，就是你自己找下分类器文档的位置，把path写清楚。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">face_cascade.load(&apos;D:/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&apos;)</span><br></pre></td></tr></table></figure><h2 id="四、识别框的形状"><a href="#四、识别框的形状" class="headerlink" title="四、识别框的形状"></a><strong>四、识别框的形状</strong></h2><p>选择输出识别框的形状，对rects（被检测物体的矩形框向量组）中的数据进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv2.circle(img, (x, y), r, (co1,co2,co3), 2)              #圆形</span><br><span class="line">cv2.rectangle(img, (x1, y1), (x2, y2), (co1,co2,co3), 2)  #矩形</span><br></pre></td></tr></table></figure><p>Then it works happily ！     φ(゜▽゜*)♪</p><p>再来张识别对比图：</p><p><img src="http://img.blog.csdn.net/20170918210302607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a><strong>五、代码</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def detect(img, cascade):</span><br><span class="line">    rects = cascade.detectMultiScale(img,1.3, 6,cv2.CASCADE_SCALE_IMAGE,(20,20))</span><br><span class="line">    if  len(rects) == 0:</span><br><span class="line">        return []</span><br><span class="line">    rects[:, 2:] += rects[:, :2]</span><br><span class="line">    print rects</span><br><span class="line">    return rects</span><br><span class="line"></span><br><span class="line">def draw_rects(img, rects):</span><br><span class="line">    r =0</span><br><span class="line">    x = 0</span><br><span class="line">    y = 0</span><br><span class="line">    num = 0</span><br><span class="line">    for x1, y1, x2, y2 in rects:</span><br><span class="line">        num = num + 1</span><br><span class="line">        co1 = 0</span><br><span class="line">        co2 = 0</span><br><span class="line">        co3 = 0</span><br><span class="line">        if(num%3 == 0): co1 = 255</span><br><span class="line">        if(num%3 == 1): co2 = 255</span><br><span class="line">        if(num%3 == 2): co3 = 255</span><br><span class="line">        x = np.int((x1 + x2) * 0.5)</span><br><span class="line">        y = np.int((y1 + y2) * 0.5)</span><br><span class="line">        r = np.int(( abs(x1 - x2) + abs(y1-y2) ) * 0.25)</span><br><span class="line">        cv2.circle(img, (x, y), r, (co1,co2,co3), 2)</span><br><span class="line">      #  cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv2.imread(&quot;2.jpg&quot;)</span><br><span class="line">cv2.namedWindow(&quot;frame&quot;, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.imshow(&quot;frame&quot;, img)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">#cv2.namedWindow(&quot;gray&quot;, cv2.WINDOW_NORMAL)</span><br><span class="line">#cv2.imshow(&quot;gray&quot;, gray)</span><br><span class="line"></span><br><span class="line">face_cascade=cv2.CascadeClassifier(&apos;haarcascade_frontalface_default.xml&apos;)</span><br><span class="line">face_cascade.load(&apos;D:/opencv/sources/data/haarcascades/haarcascade_frontalface_default.xml&apos;)</span><br><span class="line"></span><br><span class="line">rects = detect(gray, face_cascade)</span><br><span class="line"></span><br><span class="line">vis = img.copy()</span><br><span class="line"></span><br><span class="line">draw_rects(vis,rects)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(&quot;facedetect&quot;, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.imshow(&quot;facedetect&quot;, vis)</span><br><span class="line">cv2.imwrite(&quot;facedetect.jpg&quot;, vis)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del><del>~</del>~~~~</p><p><strong>当然，这个识别效果也不是特别好，再来张识别对比图</strong>（头像太小识别效果不是特别准确）：<br><img src="http://img.blog.csdn.net/20170918214156774?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>**</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>**</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先、来两张帅帅的识别效果图：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180331201543173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;目标总览：&quot;&gt;&lt;a href=&quot;#目标总览：&quot; class=&quot;headerlink&quot; title=&quot;目标总览：&quot;&gt;&lt;/a&gt;&lt;strong&gt;目标总览：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt; 一、 Haar特征分类器介绍&lt;br&gt;二、detectMultiScale函数&lt;br&gt;三、python OpenCV 解决人脸识别报错&lt;br&gt;四、识别框的形状**&lt;br&gt;五、代码实现&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="人脸识别" scheme="http://yoursite.com/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
      <category term="Opencv" scheme="http://yoursite.com/tags/Opencv/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫实战：分析豆瓣中最新电影的影评（词云显示）</title>
    <link href="http://yoursite.com/2018/03/31/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%EF%BC%9A%E5%88%86%E6%9E%90%E8%B1%86%E7%93%A3%E4%B8%AD%E6%9C%80%E6%96%B0%E7%94%B5%E5%BD%B1%E7%9A%84%E5%BD%B1%E8%AF%84%EF%BC%88%E8%AF%8D%E4%BA%91%E6%98%BE%E7%A4%BA%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/31/Python爬虫实战：分析豆瓣中最新电影的影评（词云显示）/</id>
    <published>2018-03-31T09:41:07.000Z</published>
    <updated>2018-03-31T09:45:51.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>刚接触python不久，做一个小项目来练练手。前几天看了《杀破狼·贪狼》，发现它在最新上映的电影里面是排行第一的，如下图所示。准备把豆瓣上对它的影评做一个分析。<img src="http://img.blog.csdn.net/20170821200255655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="目标总览"><a href="#目标总览" class="headerlink" title="目标总览"></a><strong>目标总览</strong></h2><p>主要做了三件事：<br>    1.抓取网页数据<br>    2.清理数据<br>    3.用词云进行展示<br>    *使用的python版本是3.6.2.</p><a id="more"></a><h2 id="一、抓取网页数据"><a href="#一、抓取网页数据" class="headerlink" title="一、抓取网页数据"></a><strong>一、抓取网页数据</strong></h2><p><strong>第一步要对网页进行访问，python中使用的是urllib库。代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">resp = request.urlopen(&apos;https://movie.douban.com/nowplaying/hangzhou/&apos;)</span><br><span class="line">html_data = resp.read().decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure><p>其中<a href="https://movie.douban.com/nowp…是豆瓣最新上映的电影页面，可以在浏览器中输入该网址进行查看。" target="_blank" rel="noopener">https://movie.douban.com/nowp…是豆瓣最新上映的电影页面，可以在浏览器中输入该网址进行查看。</a></p><p>html_data是字符串类型的变量，里面存放了网页的html代码。<br>输入print(html_data)可以查看，如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821201011841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>第二步，需要对得到的html代码进行解析，得到里面提取我们需要的数据。</strong></p><p>在python中使用BeautifulSoup库进行html代码的解析。<br>（注：如果没有安装此库，则使用pip install BeautifulSoup进行安装即可！）<br>BeautifulSoup使用的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeautifulSoup(html,&quot;html.parser&quot;)</span><br></pre></td></tr></table></figure></p><p>第一个参数为需要提取数据的html，第二个参数是指定解析器，然后使用find_all()读取html标签中的内容。</p><p>但是html中有这么多的标签，该读取哪些标签呢？其实，最简单的办法是我们可以打开我们爬取网页的html代码，然后查看我们需要的数据在哪个html标签里面，再进行读取就可以了。如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821201515844?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>从上图中可以看出在div id=”nowplaying“标签开始是我们想要的数据，里面有电影的名称、评分、主演等信息。所以相应的代码编写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line">soup = bs(html_data, &apos;html.parser&apos;)    </span><br><span class="line">nowplaying_movie = soup.find_all(&apos;div&apos;, id=&apos;nowplaying&apos;)</span><br><span class="line">nowplaying_movie_list = nowplaying_movie[0].find_all(&apos;li&apos;, class_=&apos;list-item&apos;)</span><br></pre></td></tr></table></figure><p>其中nowplaying_movie_list 是一个列表，可以用print(nowplaying_movie_list[0])查看里面的内容，如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821201655031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>在上图中可以看到data-subject属性里面放了电影的id号码，而在img标签的alt属性里面放了电影的名字，因此我们就通过这两个属性来得到电影的id和名称。（注：打开电影短评的网页时需要用到电影的id，所以需要对它进行解析），编写代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nowplaying_list = [] </span><br><span class="line">for item in nowplaying_movie_list:        </span><br><span class="line">        nowplaying_dict = &#123;&#125;        </span><br><span class="line">        nowplaying_dict[&apos;id&apos;] = item[&apos;data-subject&apos;]       </span><br><span class="line">        for tag_img_item in item.find_all(&apos;img&apos;):            </span><br><span class="line">            nowplaying_dict[&apos;name&apos;] = tag_img_item[&apos;alt&apos;]            </span><br><span class="line">            nowplaying_list.append(nowplaying_dict)</span><br></pre></td></tr></table></figure><p>其中列表nowplaying_list中就存放了最新电影的id和名称，可以使用print(nowplaying_list)进行查看，如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821202048976?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170821202246366?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>可以看到和豆瓣网址上面是匹配的。这样就得到了最新电影的信息了。接下来就要进行对最新电影短评进行分析了。例如《战狼2》的短评网址为：<a href="https://movie.douban.com/subject/26363254/comments?start=0&amp;limit=20" target="_blank" rel="noopener">https://movie.douban.com/subject/26363254/comments?start=0&amp;limit=20</a></p><p>其中26363254就是电影的id，start=0表示评论的第0条评论。</p><p>接下来接对该网址进行解析了。打开上图中的短评页面的html代码，我们发现关于评论的数据是在div标签的comment属性下面，如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821202957814?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>因此对此标签进行解析，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requrl = &apos;https://movie.douban.com/subject/&apos; + nowplaying_list[0][&apos;id&apos;] + &apos;/comments&apos; +&apos;?&apos; +&apos;start=0&apos; + &apos;&amp;limit=20&apos; </span><br><span class="line">resp = request.urlopen(requrl) </span><br><span class="line">html_data = resp.read().decode(&apos;utf-8&apos;) </span><br><span class="line">soup = bs(html_data, &apos;html.parser&apos;) </span><br><span class="line">comment_div_lits = soup.find_all(&apos;div&apos;, class_=&apos;comment&apos;)</span><br></pre></td></tr></table></figure><p>此时在comment_div_lits 列表中存放的就是div标签和comment属性下面的html代码了。在上图中还可以发现在p标签下面存放了网友对电影的评论，如下图所示:</p><p><img src="http://img.blog.csdn.net/20170821203224731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>因此对comment_div_lits 代码中的html代码继续进行解析，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eachCommentList = []; </span><br><span class="line">for item in comment_div_lits: </span><br><span class="line">        if item.find_all(&apos;p&apos;)[0].string is not None:     </span><br><span class="line">            eachCommentList.append(item.find_all(&apos;p&apos;)[0].string)</span><br></pre></td></tr></table></figure><p>使用print(eachCommentList)查看eachCommentList列表中的内容，可以看到里面存里我们想要的影评。如下图所示：<br><img src="http://img.blog.csdn.net/20170821203440715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="二、数据清洗"><a href="#二、数据清洗" class="headerlink" title="二、数据清洗"></a><strong>二、数据清洗</strong></h2><p>为了方便进行数据进行清洗，我们将列表中的数据放在一个字符串数组中，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">comments = &apos;&apos;</span><br><span class="line">for k in range(len(eachCommentList)):</span><br><span class="line">    comments = comments + (str(eachCommentList[k])).strip()</span><br></pre></td></tr></table></figure><p>使用print(comments)进行查看，如下图所示：<br><img src="http://img.blog.csdn.net/20170821203739070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>可以看到所有的评论已经变成一个字符串了，但是我们发现评论中还有不少的标点符号等。这些符号对我们进行词频统计时根本没有用，因此要将它们清除。所用的方法是正则表达式。python中正则表达式是通过re模块来实现的。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(r&apos;[\u4e00-\u9fa5]+&apos;)</span><br><span class="line">filterdata = re.findall(pattern, comments)</span><br><span class="line">cleaned_comments = &apos;&apos;.join(filterdata)</span><br></pre></td></tr></table></figure><p>继续使用print(cleaned_comments)语句进行查看，如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821203908425?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>我们可以看到此时评论数据中已经没有那些标点符号了，数据变得“干净”了很多。</p><p>因此要进行词频统计，所以先要进行中文分词操作。在这里我使用的是结巴分词。如果没有安装结巴分词，可以在控制台使用pip install jieba进行安装。（注：可以使用pip list查看是否安装了这些库）。代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import jieba    #分词包</span><br><span class="line">import pandas as pd  </span><br><span class="line"> </span><br><span class="line">segment = jieba.lcut(cleaned_comments)</span><br><span class="line">words_df=pd.DataFrame(&#123;&apos;segment&apos;:segment&#125;)</span><br></pre></td></tr></table></figure><p>因为结巴分词要用到pandas，所以我们这里加载了pandas包。可以使用words_df.head()查看分词之后的结果，如下图所示：</p><p><img src="http://img.blog.csdn.net/20170821204137676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>从上图可以看到我们的数据中有“比”、“某””等虚词（停用词），而这些词在任何场景中都是高频时，并且没有实际的含义，所以我们要他们进行清除。</p><p>我把停用词放在一个stopwords.txt文件中，将我们的数据与停用词进行比对即可（注：只要在百度中输入stopwords.txt，就可以下载到该文件）。去停用词代码如下代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stopwords=pd.read_csv(&quot;stopwords.txt&quot;,index_col=False,quoting=3,sep=&quot;\t&quot;,names=[&apos;stopword&apos;], encoding=&apos;utf-8&apos;)#quoting=3全不引用</span><br><span class="line">words_df=words_df[~words_df.segment.isin(stopwords.stopword)]</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170821204322408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>接下来就要进行词频统计了，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy    #numpy计算包</span><br><span class="line">words_stat=words_df.groupby(by=[&apos;segment&apos;])[&apos;segment&apos;].agg(&#123;&quot;计数&quot;:numpy.size&#125;)</span><br><span class="line">words_stat=words_stat.reset_index().sort_values(by=[&quot;计数&quot;],ascending=False)</span><br></pre></td></tr></table></figure><p>用words_stat.head()进行查看，结果如下：</p><p><img src="http://img.blog.csdn.net/20170821204500122?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>由于我们前面只是爬取了第一页的评论，所以数据有点少，在最后给出的完整代码中，我爬取了10页的评论，所数据还是有参考价值。</p><h2 id="三、用词云进行显示"><a href="#三、用词云进行显示" class="headerlink" title="三、用词云进行显示"></a><strong>三、用词云进行显示</strong></h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"> </span><br><span class="line">import matplotlib</span><br><span class="line">matplotlib.rcParams[&apos;figure.figsize&apos;] = (10.0, 5.0)</span><br><span class="line">from wordcloud import WordCloud#词云包</span><br><span class="line"> </span><br><span class="line">wordcloud=WordCloud(font_path=&quot;simhei.ttf&quot;,background_color=&quot;white&quot;,max_font_size=80) #指定字体类型、字体大小和字体颜色</span><br><span class="line">word_frequence = &#123;x[0]:x[1] for x in words_stat.head(1000).values&#125;</span><br><span class="line">word_frequence_list = []</span><br><span class="line">for key in word_frequence:</span><br><span class="line">    temp = (key,word_frequence[key])</span><br><span class="line">    word_frequence_list.append(temp)</span><br><span class="line"> </span><br><span class="line">wordcloud=wordcloud.fit_words(word_frequence_list)</span><br><span class="line">plt.imshow(wordcloud)</span><br></pre></td></tr></table></figure><p>其中simhei.ttf使用来指定字体的，可以在百度上输入simhei.ttf进行下载后，放入程序的根目录即可。显示的图像如下：</p><p><img src="http://img.blog.csdn.net/20170821204828299?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>到此为止，整个项目的介绍就结束了。由于自己也还是个初学者，接触python不久，代码写的并不好。而且第一次写技术博客，表达的有些冗余，请大家多多包涵，有不对的地方，请大家批评指正。以后我也会将自己做的小项目以这种形式写在博客上和大家一起交流！最后贴上完整的代码。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a><strong>完整代码</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(&quot;ignore&quot;)</span><br><span class="line">import jieba  # 分词包</span><br><span class="line">import numpy  # numpy计算包</span><br><span class="line">import codecs  # codecs提供的open方法来指定打开的文件的语言编码，它会在读取的时候自动转换为内部unicode</span><br><span class="line">import re</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from PIL import Image</span><br><span class="line">from urllib import request</span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line">from wordcloud import WordCloud,ImageColorGenerator # 词云包</span><br><span class="line">import matplotlib</span><br><span class="line">matplotlib.rcParams[&apos;figure.figsize&apos;] = (10.0, 5.0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分析网页函数</span><br><span class="line">def getNowPlayingMovie_list():</span><br><span class="line">    resp = request.urlopen(&apos;https://movie.douban.com/nowplaying/hangzhou/&apos;)</span><br><span class="line">    html_data = resp.read().decode(&apos;utf-8&apos;)</span><br><span class="line">    soup = bs(html_data, &apos;html.parser&apos;)</span><br><span class="line">    nowplaying_movie = soup.find_all(&apos;div&apos;, id=&apos;nowplaying&apos;)</span><br><span class="line">    nowplaying_movie_list = nowplaying_movie[0].find_all(&apos;li&apos;, class_=&apos;list-item&apos;)</span><br><span class="line">    nowplaying_list = []</span><br><span class="line">    for item in nowplaying_movie_list:</span><br><span class="line">        nowplaying_dict = &#123;&#125;</span><br><span class="line">        nowplaying_dict[&apos;id&apos;] = item[&apos;data-subject&apos;]</span><br><span class="line">        for tag_img_item in item.find_all(&apos;img&apos;):</span><br><span class="line">            nowplaying_dict[&apos;name&apos;] = tag_img_item[&apos;alt&apos;]</span><br><span class="line">            nowplaying_list.append(nowplaying_dict)</span><br><span class="line">    return nowplaying_list</span><br><span class="line"></span><br><span class="line"># 爬取评论函数</span><br><span class="line">def getCommentsById(movieId, pageNum):</span><br><span class="line">    eachCommentList = []</span><br><span class="line">    if pageNum &gt; 0:</span><br><span class="line">        start = (pageNum - 1) * 20</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line">    requrl = &apos;https://movie.douban.com/subject/&apos; + movieId + &apos;/comments&apos; + &apos;?&apos; + &apos;start=&apos; + str(start) + &apos;&amp;limit=20&apos;</span><br><span class="line">    print(requrl)</span><br><span class="line">    resp = request.urlopen(requrl)</span><br><span class="line">    html_data = resp.read().decode(&apos;utf-8&apos;)</span><br><span class="line">    soup = bs(html_data, &apos;html.parser&apos;)</span><br><span class="line">    comment_div_lits = soup.find_all(&apos;div&apos;, class_=&apos;comment&apos;)</span><br><span class="line">    for item in comment_div_lits:</span><br><span class="line">        if item.find_all(&apos;p&apos;)[0].string is not None:</span><br><span class="line">            eachCommentList.append(item.find_all(&apos;p&apos;)[0].string)</span><br><span class="line">    return eachCommentList</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 循环获取第一个电影的前10页评论</span><br><span class="line">    commentList = []</span><br><span class="line">    NowPlayingMovie_list = getNowPlayingMovie_list()</span><br><span class="line">    for i in range(10):</span><br><span class="line">        num = i + 1</span><br><span class="line">        commentList_temp = getCommentsById(NowPlayingMovie_list[0][&apos;id&apos;], num)</span><br><span class="line">        commentList.append(commentList_temp)</span><br><span class="line"></span><br><span class="line">    # 将列表中的数据转换为字符串</span><br><span class="line">    comments = &apos;&apos;</span><br><span class="line">    for k in range(len(commentList)):</span><br><span class="line">        comments = comments + (str(commentList[k])).strip()</span><br><span class="line"></span><br><span class="line">    # 使用正则表达式去除标点符号</span><br><span class="line">    pattern = re.compile(r&apos;[\u4e00-\u9fa5]+&apos;)</span><br><span class="line">    filterdata = re.findall(pattern, comments)</span><br><span class="line">    cleaned_comments = &apos;&apos;.join(filterdata)</span><br><span class="line"></span><br><span class="line">    # 使用结巴分词进行中文分词</span><br><span class="line">    segment = jieba.lcut(cleaned_comments)</span><br><span class="line">    words_df = pd.DataFrame(&#123;&apos;segment&apos;: segment&#125;)</span><br><span class="line"></span><br><span class="line">    # 去掉停用词</span><br><span class="line">    stopwords = pd.read_csv(&quot;stopwords.txt&quot;, index_col=False, quoting=3, sep=&quot;\t&quot;, names=[&apos;stopword&apos;],</span><br><span class="line">                            encoding=&apos;utf-8&apos;)  # quoting=3全不引用</span><br><span class="line">    words_df = words_df[~words_df.segment.isin(stopwords.stopword)]</span><br><span class="line"></span><br><span class="line">    # 统计词频</span><br><span class="line">    words_stat = words_df.groupby(by=[&apos;segment&apos;])[&apos;segment&apos;].agg(&#123;&quot;计数&quot;: numpy.size&#125;)</span><br><span class="line">    words_stat = words_stat.reset_index().sort_values(by=[&quot;计数&quot;], ascending=False)</span><br><span class="line">    #  print(words_stat.head())</span><br><span class="line"></span><br><span class="line">    bg_pic = numpy.array(Image.open(&quot;alice_mask.png&quot;))</span><br><span class="line"></span><br><span class="line">    # 用词云进行显示</span><br><span class="line">    wordcloud = WordCloud(</span><br><span class="line">        font_path=&quot;simhei.ttf&quot;,</span><br><span class="line">        background_color=&quot;white&quot;,</span><br><span class="line">        max_font_size=80,</span><br><span class="line">        width = 2000,</span><br><span class="line">        height = 1800,</span><br><span class="line">        mask = bg_pic,</span><br><span class="line">        mode = &quot;RGBA&quot;</span><br><span class="line">    )</span><br><span class="line">    word_frequence = &#123;x[0]: x[1] for x in words_stat.head(1000).values&#125;</span><br><span class="line">    # print(word_frequence)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    word_frequence_list = []</span><br><span class="line">    for key in word_frequence:</span><br><span class="line">        temp = (key, word_frequence[key])</span><br><span class="line">        word_frequence_list.append(temp)</span><br><span class="line">        #print(word_frequence_list)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    wordcloud = wordcloud.fit_words(word_frequence)</span><br><span class="line"></span><br><span class="line">    image_colors = ImageColorGenerator(bg_pic) # 根据图片生成词云颜色</span><br><span class="line"></span><br><span class="line">    plt.imshow(wordcloud) #显示词云图片</span><br><span class="line">    plt.axis(&quot;off&quot;)</span><br><span class="line">    plt.show()</span><br><span class="line">    wordcloud.to_file(&apos;show_Chinese.png&apos;)  # 把词云保存下来</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>结果显示如下：</p><p><img src="http://img.blog.csdn.net/20170821204940677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;刚接触python不久，做一个小项目来练练手。前几天看了《杀破狼·贪狼》，发现它在最新上映的电影里面是排行第一的，如下图所示。准备把豆瓣上对它的影评做一个分析。&lt;img src=&quot;http://img.blog.csdn.net/20170821200255655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;目标总览&quot;&gt;&lt;a href=&quot;#目标总览&quot; class=&quot;headerlink&quot; title=&quot;目标总览&quot;&gt;&lt;/a&gt;&lt;strong&gt;目标总览&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;主要做了三件事：&lt;br&gt;    1.抓取网页数据&lt;br&gt;    2.清理数据&lt;br&gt;    3.用词云进行展示&lt;br&gt;    *使用的python版本是3.6.2.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="WordCloud" scheme="http://yoursite.com/tags/WordCloud/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github 搭建属于自己的博客</title>
    <link href="http://yoursite.com/2018/03/30/Hexo+Github%20%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/03/30/Hexo+Github 搭建属于自己的博客/</id>
    <published>2018-03-30T08:10:15.000Z</published>
    <updated>2018-03-31T09:11:36.148Z</updated>
    
    <content type="html"><![CDATA[<p>个人博客界面：</p><p><img src="http://img.blog.csdn.net/20180330232952080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><p>首先呢，先说一下吧，作为一个程序猿来说，大多的大牛都是使用的是msdn/github这些来交流技术，但是我后来发现csdn上面好多的大牛都已经摒弃csdn，自己搭建个人博客进行发表文章记录点滴了。</p><p>虽然说我不会放弃csdn，因为已经养成了习惯了，但是还是想拥有一个自己的博客，那是因为这是一种信仰。</p><p>今天呢，花了一天的时候，研究了一下，颇有收获。</p><p>搭建个人博客=域名(外网可访问的地址)+外网服务器(外网存储文件图片的地方)+解析(本地与服务器做映射)</p><p><strong>也可以先看看我用Hexo搭的<a href="https://aiminwang.github.io" target="_blank" rel="noopener">博客(不建议用IE浏览器打开)</a>【虽然可能也不是特别好看…】</strong></p><a id="more"></a><hr><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>　　相信点进来看的都是对 Hexo 已经有了一定了解的吧~简而言之，Hexo 是一个基于 Node.js 的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。其作者是来自台湾的tommy351大神。Hexo 因其界面简洁、美观且对各类人群（不只是程序猿）友好而广受欢迎</p><hr><h2 id="基础配置篇"><a href="#基础配置篇" class="headerlink" title="基础配置篇"></a>基础配置篇</h2><p>1.安装 &amp; 搭建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">•安装Git：安装后，注册 Github 账号，配置 SSH（具体见下一步）,打开 Git Bash,接下来的命令均在Git Bash中执行</span><br><span class="line">•安装Node.js</span><br><span class="line">•安装 Hexo : $npm install -g hexo</span><br><span class="line">•安装依赖包： $npm install</span><br><span class="line">•新建博客文件夹：cd到该文件夹，执行$hexo init</span><br><span class="line">•新建Github仓库：仓库名必须为你的Github名.github.io，要不然就不能使用Github Pages服务了。。。</span><br></pre></td></tr></table></figure><p>2.配置 SSH</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 关于什么是 SSH，请自行百度（我懒..）这里直接讲一下配置步骤。 </span><br><span class="line">•本地生成公钥私钥 </span><br><span class="line"> 　$ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</span><br><span class="line">•添加公钥到 Github </span><br><span class="line">•根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。(或许乱码，那就换一种打开方式吧！)</span><br><span class="line">•登录 Github，右上角 头像 -&gt; Settings —&gt; SSH keys —&gt; Add SSH key。把公钥粘贴到key中，填好title并点击 Add key。</span><br><span class="line">•git bash中输入命令$ssh -T git@github.com，选yes，等待片刻可看到成功提示。(记得：git init.......)</span><br></pre></td></tr></table></figure><ol start="3"><li>yilia主题下载</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> yilia 主题是一款简洁美观不失逼格的主题。下载方法有以下两种： </span><br><span class="line">•进入博客根目录/themes/, 执行</span><br><span class="line"> $git clone https://github.com/iissnan/hexo-theme-yilia.git</span><br><span class="line">•直接进入上面的链接，在项目主页download zip文件，然后解压到博客根目录/themes/ 文件夹</span><br></pre></td></tr></table></figure><ol start="4"><li>发布</li></ol><p>使用以下两条命令进行发布，发布成功后可在浏览器中使用你的github名.github.io进入你的博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean</span><br><span class="line">$hexo d -g</span><br></pre></td></tr></table></figure><hr><h2 id="Hexo日常使用篇"><a href="#Hexo日常使用篇" class="headerlink" title="Hexo日常使用篇"></a>Hexo日常使用篇</h2><p>1.生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo generate1</span><br></pre></td></tr></table></figure><p>2.本地预览：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo server//或 hexo s</span><br><span class="line">//然后打开浏览器输入localhost:4000可以预览博客效果，用于调试</span><br></pre></td></tr></table></figure><p>3.新建文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo new post &quot;title&quot;</span><br><span class="line">//新文章位置：/source/_posts</span><br></pre></td></tr></table></figure><p>4.新建页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo new page &quot;title&quot;</span><br></pre></td></tr></table></figure><p>5.部署并生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo d -g</span><br></pre></td></tr></table></figure><p>6.清除生成的文件和缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean</span><br></pre></td></tr></table></figure><hr><h2 id="config文件配置篇"><a href="#config文件配置篇" class="headerlink" title="_config文件配置篇"></a>_config文件配置篇</h2><p>1.整站配置</p><p>直接贴一下我的配置文件吧【路径：博客根目录/_config.yml】 </p><p>【友情提示：不要用系统自带记事本打开，容易出现编码不一致问题，最好用 Vim, Notepad++ 或 Sublime Text 之类的】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Aimin-Wang</span><br><span class="line">subtitle: Stay Hungry, Stay Foolish</span><br><span class="line">description: </span><br><span class="line">keywords:</span><br><span class="line">author: Aimin Wang</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &apos;&apos;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: yilia</span><br><span class="line">plugin:</span><br><span class="line">        -hexo-generator-feed</span><br><span class="line">feed:</span><br><span class="line">        type: atom</span><br><span class="line">        path: atom.xml</span><br><span class="line">        limit: 20</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">        type: git</span><br><span class="line">        repo: git@github.com:aiminwang/aiminwang.github.io.git</span><br><span class="line">        branch: master</span><br><span class="line"></span><br><span class="line">jsonContent:</span><br><span class="line">        meta: false</span><br><span class="line">        pages: false</span><br><span class="line">        posts:</span><br><span class="line">                title: true</span><br><span class="line">                date: true</span><br><span class="line">                path: true</span><br><span class="line">                text: false</span><br><span class="line">                raw: false</span><br><span class="line">                content: false</span><br><span class="line">                slug: false</span><br><span class="line">                updated: false</span><br><span class="line">                comments: false</span><br><span class="line">                link: false</span><br><span class="line">                permalink: false</span><br><span class="line">                excerpt: false</span><br><span class="line">                categories: false</span><br><span class="line">                tags: true</span><br></pre></td></tr></table></figure><p>2.yilia主题配置</p><p>一样贴一下我的主题config文件吧，注意和上面的全局config文件区分。<br> 【路径：博客根目录/themes/next/_config.yml】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  分类: /categories</span><br><span class="line">  归档: /archives</span><br><span class="line">  #标签: /tags</span><br><span class="line">  #随笔: /tags/随笔/</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;https://github.com/aiminwang&quot;</span><br><span class="line">  weibo: &quot;https://weibo.com/u/5839866284?topnav=1&amp;wvr=6&amp;topsug=1&amp;is_hot=1&quot;</span><br><span class="line">  rss: &quot;/atom.xml&quot;</span><br><span class="line">  #zhihu: &quot;#&quot;</span><br><span class="line">  qq: &quot;https://user.qzone.qq.com/751196078/main&quot;</span><br><span class="line">  #weixin: &quot;#&quot;</span><br><span class="line">  #jianshu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #segmentfault: &quot;#&quot;</span><br><span class="line">  #bilibili: &quot;#&quot;</span><br><span class="line">  #acfun: &quot;#&quot;</span><br><span class="line">  mail: &quot;mailto:751196078@qq.com&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line">auto_excerpt:</span><br><span class="line">        enable: true</span><br><span class="line">        length: 130</span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: more</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 2</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: /img/weixin.jpg</span><br><span class="line"></span><br><span class="line"># 目录</span><br><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line">toc: 2</span><br><span class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><br><span class="line">toc_hide_index: true</span><br><span class="line"># 目录为空时的提示</span><br><span class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</span><br><span class="line"></span><br><span class="line"># 是否有快速回到顶部的按钮</span><br><span class="line">top: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">baidu_analytics: &apos;&apos;</span><br><span class="line">google_analytics: &apos;&apos;</span><br><span class="line">favicon: /favicon.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: /img/touxiang.jpg</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: true</span><br><span class="line"></span><br><span class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span><br><span class="line">#不需要使用某项，直接设置值为false，或注释掉</span><br><span class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span><br><span class="line"></span><br><span class="line">#1、多说</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line">#2、网易云跟帖</span><br><span class="line">wangyiyun: false</span><br><span class="line"></span><br><span class="line">#3、畅言</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_conf: false</span><br><span class="line"></span><br><span class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span><br><span class="line">disqus: false</span><br><span class="line"></span><br><span class="line">#5、Gitment</span><br><span class="line">gitment_owner: false      #你的 GitHub ID</span><br><span class="line">gitment_repo: &apos;&apos;          #存储评论的 repo</span><br><span class="line">gitment_oauth:</span><br><span class="line">  client_id: &apos;&apos;           #client ID</span><br><span class="line">  client_secret: &apos;&apos;       #client secret</span><br><span class="line"></span><br><span class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><br><span class="line">style:</span><br><span class="line">  # 头像上面的背景颜色</span><br><span class="line">  header: &apos;#4d4d4d&apos;</span><br><span class="line">  # 右滑板块背景</span><br><span class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</span><br><span class="line"></span><br><span class="line"># slider的设置</span><br><span class="line">slider:</span><br><span class="line">  # 是否默认展开tags板块</span><br><span class="line">  showTags: false</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;搜索&apos;</span><br><span class="line">  friends: &apos;友链&apos;</span><br><span class="line">  aboutme: &apos;关于&apos;</span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  一只IT小小鸟 CSDN: https://blog.csdn.net/qq_34777600</span><br><span class="line">  Hdu oj: http://www.sogou.com/link?url=BluioFHAuoHd9n_SzD_VRWy70yUaL4Tl&amp;query=hdu</span><br><span class="line">  Pk oj: http://www.sogou.com/link?url=TiECA-reDTA2VFaXClSXEQ..&amp;query=poj</span><br><span class="line">  友情链接: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</span><br></pre></td></tr></table></figure><hr><p>再来一张界面：</p><p><img src="http://img.blog.csdn.net/20180330233135781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="修改全局配置文件"><a href="#修改全局配置文件" class="headerlink" title="修改全局配置文件"></a>修改全局配置文件</h2><p>此段落引用自Hexo官方文档</p><p>您可以在 _config.yml 中修改大部份的配置。</p><p>网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">参数 描述</span><br><span class="line"></span><br><span class="line">title  网站标题 </span><br><span class="line">subtitle  网站副标题 </span><br><span class="line">description  网站描述 </span><br><span class="line">author  您的名字 </span><br><span class="line">language  网站使用的语言 </span><br><span class="line">timezone  网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span><br></pre></td></tr></table></figure><p>网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数   描述默认值</span><br><span class="line">url     网址  </span><br><span class="line">root       网站根目录  </span><br><span class="line">permalink       文章的永久链接格式      :year/:month/:day/:title/ </span><br><span class="line">permalink_default   永久链接中各部分的默认值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br></pre></td></tr></table></figure><p>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">参数     描述                       默认值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source_dir  资源文件夹，这个文件夹用来存放内容。           source </span><br><span class="line">public_dir  公共文件夹，这个文件夹用于存放生成的站点文件。   public </span><br><span class="line">tag_dir  标签文件夹                                 tags </span><br><span class="line">archive_dir  归档文件夹                                 archives </span><br><span class="line">category_dir 分类文件夹                                 categories </span><br><span class="line">code_dir     Include code 文件夹                       `downloads/code </span><br><span class="line">i18n_dir     国际化（i18n）文件夹                        :lang </span><br><span class="line">skip_render  跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span><br></pre></td></tr></table></figure><p>文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参数描述默认值</span><br><span class="line"></span><br><span class="line">new_post_name 新文章的文件名称  :title.md </span><br><span class="line">default_layout 预设布局     post </span><br><span class="line">auto_spacing  在中文和英文之间加入空格   false </span><br><span class="line">titlecase  把标题转换为    title case false </span><br><span class="line">external_link  在新标签中打开链接 true </span><br><span class="line">filename_case  把文件名称转换为1小写或2大写  0 </span><br><span class="line">render_drafts  显示草稿     false </span><br><span class="line">post_asset_folder  启动 Asset 文件夹    false </span><br><span class="line">relative_link 把链接改为与根目录的相对位址  false </span><br><span class="line">future  显示未来的文章  true </span><br><span class="line">highlight  代码块的设置</span><br></pre></td></tr></table></figure><p>分类 &amp; 标签   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数  描述默认值</span><br><span class="line"></span><br><span class="line">default_category   默认分类           uncategorized </span><br><span class="line">category_map       分类别名  </span><br><span class="line">tag_map            标签别名</span><br></pre></td></tr></table></figure><p>日期 / 时间格式</p><p>Hexo 使用 Moment.js 来解析和显示时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数   描述 默认值</span><br><span class="line">date_format    日期格式 MMM D YYYY </span><br><span class="line">time_format    时间格式 H:mm:ss</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数      描述            默认值</span><br><span class="line">per_page     每页显示的文章量(0=关闭分页功能)   10 </span><br><span class="line">pagination_dir  分页目录 page</span><br></pre></td></tr></table></figure><p>扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数描述</span><br><span class="line">theme 当前主题名称。值为false时禁用主题 </span><br><span class="line">deploy 部署部分的设置</span><br></pre></td></tr></table></figure></p><p>配置Deployment</p><p>首先，你需要为自己配置身份信息，打开命令行，然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>同样在_config.yml文件中，找到Deployment，然后按照如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>如果使用git方式进行部署，执行npm install hexo-deployer-git –save来安装所需的插件</p><p>然后在当前目录打开命令行，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>随后按照提示，分别输入自己的Github账号用户名和密码，开始上传。 然后通过<a href="http://yourname.github.io/来访问自己刚刚上传的网站。" target="_blank" rel="noopener">http://yourname.github.io/来访问自己刚刚上传的网站。</a></p><p>添加新文章<br>打开Hexo目录下的source文件夹，所有的文章都会以md形式保存在_post文件夹中，只要在_post文件夹中新建md类型的文档，就能在执行hexo g的时候被渲染。 新建的文章头需要添加一些yml信息，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: hello-world         //在此处添加你的标题。</span><br><span class="line">date: 2014-11-7 08:55:29   //在此处输入你编辑这篇文章的时间。</span><br><span class="line">categories: Exercise       //在此处输入这篇文章的分类。</span><br><span class="line">toc: true                  //在此处设定是否开启目录，需要主题支持。</span><br></pre></td></tr></table></figure><hr><h2 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h2><p>第一步: Github注册</p><p>打开<a href="https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。" target="_blank" rel="noopener">https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。</a><br><img src="http://img.blog.csdn.net/20180330230614751?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。</p><p>一定要确认注册，否则无法使用gh-pages！</p><p>第二步: 创建代码库</p><p>登陆之后，点击页面右上角的加号，选择New repository：<br><img src="http://img.blog.csdn.net/20180330230706338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>新建代码库</p><p>进入代码库创建页面：</p><p>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：<br><img src="http://img.blog.csdn.net/20180330230746303?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>注意：比如我的github名称是gdutxiaoxu ,这里你就填 gdutxiaoxu.github.io,如果你的名字是xujun，那你就填 xujun.github.io</p><p>第三步: . 代码库设置</p><p>正确创建之后，你将会看到如下界面：<br><img src="http://img.blog.csdn.net/20180330230826419?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：</p><p><img src="http://img.blog.csdn.net/20180330230925531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>Github pages</p><p><img src="http://img.blog.csdn.net/20180330230959669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。如果你的配置没有问题，那么大约15分钟之后, yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。</p><hr><h2 id="将Hexo与github-page-联系起来"><a href="#将Hexo与github-page-联系起来" class="headerlink" title="将Hexo与github page 联系起来"></a>将Hexo与github page 联系起来</h2><p>大概分为以下几步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">•配置git个人信息</span><br><span class="line"></span><br><span class="line">•配置Deployment</span><br></pre></td></tr></table></figure></p><p>配置Git个人信息</p><p>如果你之前已经配置好git个人信息，请跳过这一个 步骤，直接来到</p><p>1、设置Git的user name和email：(如果是第一次的话)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;aiminwang&quot;</span><br><span class="line">git config --global user.email &quot;751196078@qq.com&quot;</span><br></pre></td></tr></table></figure></p><p>2、生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;751196078@qq.com&quot;</span><br></pre></td></tr></table></figure><p>配置Deployment</p><p>同样在_config.yml文件中，找到Deployment，然后按照如下修改：</p><p>比如我的仓库的地址是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:aiminwang/aiminwang.github.io.git，所以配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:gdutxiaoxu/gdutxiaoxu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><hr><p>搭建过程中遇到很多问题，一步一步地解决，就会有Accept的喜悦，颇有收获。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人博客界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180330232952080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先呢，先说一下吧，作为一个程序猿来说，大多的大牛都是使用的是msdn/github这些来交流技术，但是我后来发现csdn上面好多的大牛都已经摒弃csdn，自己搭建个人博客进行发表文章记录点滴了。&lt;/p&gt;
&lt;p&gt;虽然说我不会放弃csdn，因为已经养成了习惯了，但是还是想拥有一个自己的博客，那是因为这是一种信仰。&lt;/p&gt;
&lt;p&gt;今天呢，花了一天的时候，研究了一下，颇有收获。&lt;/p&gt;
&lt;p&gt;搭建个人博客=域名(外网可访问的地址)+外网服务器(外网存储文件图片的地方)+解析(本地与服务器做映射)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也可以先看看我用Hexo搭的&lt;a href=&quot;https://aiminwang.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客(不建议用IE浏览器打开)&lt;/a&gt;【虽然可能也不是特别好看…】&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Github" scheme="http://yoursite.com/categories/Github/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL 叩开3D的心扉</title>
    <link href="http://yoursite.com/2018/03/30/OpenGL-%E5%8F%A9%E5%BC%803D%E7%9A%84%E5%BF%83%E6%89%89/"/>
    <id>http://yoursite.com/2018/03/30/OpenGL-叩开3D的心扉/</id>
    <published>2018-03-30T08:10:15.000Z</published>
    <updated>2018-03-31T12:28:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>先展示一张OpenGL画的旋转茶壶：</p><p><img src="http://img.blog.csdn.net/20180331202805170?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>OpenGL简介</strong></p><p>是在SGI等多家世界闻名的计算机公司的倡导下，以SGI的GL三维图形库为基础制定的一个通用共享的开放式三维图形标准。是图形硬件的一个软件接口。</p><p><strong>OpenGL特点</strong><br><a id="more"></a><br>OpenGL是一个开放的三维图形软件包，它独立于窗口系统和操作系统，以它为基础开发的应用程序可以十分方便地在各种平台间移植。<br>OpenGL可以与Visual C++紧密接口，便于实现有关计算和图形算法，可保证算法的正确性和可靠性。<br> OpenGL使用简便，效率高。 </p><p><strong>vs环境下OpenGL函数库配置</strong></p><p>加载glut库<br>把过glut32.lib拷贝到VC的安装目录下的lib文件夹中：如D:\Program Files\Microsoft Visual Studio\VC98\Lib<br>把glut.h拷贝到VC的安装目录下的Include\GL文件夹中：如：D:\Program Files\Microsoft Visual Studio\VC98\Include\GL<br>把glut32.dll拷贝到C:\WINDOWS\system32</p><p><strong>OpenGL函数的命名规则</strong></p><p>一般的函数命名如下：<br>&lt;前缀&gt;&lt;根函数&gt;&lt;参数数目&gt;&lt;参数类型&gt;</p><p>前缀有gl、glu、aux、glut、wgl、glx、agl等等，分别表示该函数属于OpenGL那个开发库等。所谓开发库，要知道原生的OpenGL是跨平台的，跨平台意味着很多功能是无法实现的，比如说Windows和X-Window的窗口实现机制是不同的，OpenGL并不关心这些东西，只管画图。所以，OpenGL并没有窗口函数，比如无法创建窗口，无法获得输入……这些东西都需要其他的函数库来实现。用OpenGL常用的工具函数库来实现。</p><p>我们主要使用两种，一个是GLU库，它提供了比较基础的命令的封装，可以很简单的实现比较多的复杂功能；而另外一个就是GLUT，glut是不依赖于窗口平台的OpenGL工具包，目的是隐藏不同窗口平台API的复杂度，提供更为复杂的绘制功能，我们会大量的使用它。</p><p>OpenGL内部数据都是以float的形式存放的，如果使用double会对性能有一定的影响。</p><hr><p><strong>初始化窗口</strong></p><p><code>glutInit()</code> 是用glut来初始化OpenGL的，所有的问题都交给这个函数吧，基本不用管，虽说可以接受参数的，基本无用。</p><p><code>glutInitDisplayMode(MODE)</code> 非常重要，这里告诉系统我们需要一个怎样显示模式。至于其参数GLUT_RGBA就是使用(red, green, blue)的颜色系统。有没有写错？这里有个A啊，不应该是(red, green, blue, alpha)么？大概是历史原因，GLUT_RGBA和GLUT_RGB是其实是等价的（坑爹啊），要想实现Alpha还得用其他的参数。而GLUT_SINGLE意味着所有的绘图操作都直接在显示的窗口执行，相对的，我们还有一个双缓冲的窗口，对于动画来说非常合适。</p><p><code>glutInitWindowSize(400, 400)</code> 这个函数很容易理解，设置出现的窗口的大小。实际上还有个glutInitWindowPosition()也很常用，用来设置窗口出现的位置。</p><p><code>glutCreateWindow(“First”)</code> ，一旦调用了，就出现一个窗口了，参数就是窗口的标题。</p><p><code>glutDisplayFunc(func)</code> 是glut非常讨人喜欢的一个功能，它注册了一个函数，用来绘制OpenGL窗口，这个函数里就写着很多OpenGL的绘图操作等命令，也就是我们主要要学习的东西。</p><p><code>glutMainLoop()</code> ，主循环，一旦调用了，我们的OpenGL就一直运行下去了。和很多程序中的主循环一样，不停的运行，画出即时的图像，处理输入等。</p><hr><p><strong>绘图</strong></p><p>看看drawFunc里的几句话，这里是实际绘图的函数。</p><p><code>glClear(GL_COLOR_BUFFER_BIT)</code> 是把先前的画面给清除，这基本是定律，每次重绘之前都要把原来的画面擦除，否则叠加起来什么都看不出了。glClear一看就知道是OpenGL原生的命令，而参数就是指明要清除的buffer。大家一定会有疑问，我们清除，不就是清除屏幕上的画面么，为什么还要指定？OpenGL的博大精深这里就体现出来了，buffer不仅仅有我们看到的那个GL_COLOR_BUFFER_BIT，OpenGL中还有其他的buffer类型，我们会在后面的章节讲到。</p><p><code>glutWireTeapot(0.5)</code> 是glut提供的绘制犹他茶壶的工具函数，茶壶还是相当复杂的一个几何体，用这个函数一下子就画出来了，不过基本也就演示用用。这里是用的线模型，因为没有说光照和材质，如果glutSolidTeapot()画出来就成纸片儿了。</p><p><code>glFlush()</code> 似乎不用多说，画了那么多，自然要刷新一下显示。不过，这里的刷新不仅仅是屏幕上的更新，实际上，它是处理OpenGL的渲染流水线，让所有排队中的命令得到执行。OpenGL的渲染流水线是一个很重要的概念，不过这里暂时还不打算多说明，否则对初学者来说，未免有些麻烦了。<br><code>glutSwapBuffers();</code> 交换缓冲区（使用双缓存GLUT_DOUBLE，必须交换缓存才能显示）</p><hr><p><strong>小惊喜</strong></p><blockquote><p><code>glutIdleFunc(Func)</code> 又是一个激动人心的函数，可以让OpenGL在闲暇之余，调用一下注册的函数，这是是产生动画的绝好方法<br><code>gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);</code><br>//定义一个视图矩阵，并与当前矩阵相乘（实现漫游）</p></blockquote><pre><code> void gluLookAt(GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz);该 函数定义一个视图 矩阵，并与当前矩阵相乘。第一组eyex, eyey, eyez 相机在世界坐标的位置第二组centerx, centery, centerz 相机镜头对准的物体在世界坐标的位置第三组upx, upy, upz 相机向上的方向在世界坐标中的方向你把相机想象成为你自己的脑袋：第一组数据就是脑袋的位置第二组数据就是眼睛看的物体的位置第三组就是头顶朝向的方向（因为你可以歪着头看同一个物体）OpenGL中维持着两套矩阵，一个是模型视图矩阵（model view matrix），另一个是投影矩阵（projection matrix）。通过对OpenGL这两套矩阵的变换，我们可以得到各种投影效果</code></pre><p><strong>一些常用函数</strong></p><blockquote><p><code>glColor3f(1.0, 0.0, 0.0);</code>                       //画笔红色<br><code>glutReshapeFunc(reshape);</code>               //窗口发生改变再渲染<br><code>glutMouseFunc(mouse);</code><br><code>glutMotionFunc(motion);</code><br>//处理当鼠标键摁下时，鼠标拖动的事件。当鼠标拖动时，将每一帧都调用一次这个函数 glLoadIdentity();<br>//重置当前模型观察矩阵</p><p><code>glPushMatrix();</code><br>//把刚刚的那个位置和角度保存进栈中（主要用于平移，旋转，缩放等）保存当前模型视图 glPopMatrix();<br>//根据保存的值恢复出位置，角度等 glRotatef(anglex, 1.0, 0.0, 0.0);<br>//以（x,y,z）向量为旋转轴旋转angle度 glScalef(1.0,1.0,1.0);<br>//每一点坐标分别乘以x,y,z倍(缩放)</p><p><code>glViewport(0, 0, (GLsizei)w, (GLsizei)h);</code><br>//负责把视景体截取的图像按照怎样的高和宽显示到屏幕上     glMatrixMode(GL_PROJECTION);<br>//设置当前矩阵模式：对投影矩阵应用随后的矩阵操作  与glLoadIdentity()一同使用<br><code>glLoadIdentity();</code><br>  //重置当前模型观察矩阵：将当前的用户坐标系的原点移到了屏幕中心 &gt;<code>&gt;</code>gluPerspective(60.0, (GLfloat)w /(GLfloat)h, 1.0, 20.0);<code>//创建一个投影矩阵并且与当前矩阵相乘,得到的矩阵设定为当前变换，但要先通过glMatrixMode设定成投影矩阵才会得到想要的投影矩阵变换</code> glMatrixMode(GL_MODELVIEW);  <code>//设置当前矩阵模式：对模型视景矩阵堆栈应用随后的矩阵操作 另GL_TEXTURE参数,是对纹理矩阵堆栈应用随后的矩阵操作</code> glLoadIdentity();         <code>//重置当前模型观察矩阵：将当前的用户坐标系的原点移到了屏幕中心</code> gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0,0.0, 0.0, 1.0, 0.0);`<br>  //定义一个视图  与当阵相乘（）</p></blockquote><hr><p><strong>用OpenGL编写程序的模板基本模板</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//主函数</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">   glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);        //设置显示模式（颜色、缓冲区等）</span><br><span class="line">glutCreateWindow(“A Simple Example”); //创建窗口</span><br><span class="line">    SetupRC();                      //初始化渲染环境</span><br><span class="line">glutDisplayFunc(RenderScene);  //调用场景渲染函数</span><br><span class="line">    glutReshapeFunc(ChangeSize);   //窗口发生变化</span><br><span class="line">glutMainLo();                  //程序开始事件处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>几何图元的绘制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">glBegin(GL_TRIANGLES);      //三角形</span><br><span class="line">glVertex3f(0.0f,1.0f,0.0f);</span><br><span class="line">glVertex3f(-1.0f,-1.0f,0.0f);</span><br><span class="line">glVertex3f(1.0f,-1.0f,0.0f);</span><br><span class="line">glEnd();</span><br><span class="line">glBegin(GL_QUADS);           //四边形</span><br><span class="line">glVertex3f(-1.0f,1.0f,0.0f);</span><br><span class="line">glVertex3f(1.0f,1.0f,0.0f);</span><br><span class="line">glVertex3f(1.0f,-1.0f,0.0f);</span><br><span class="line">glVertex3f(-1.0f,-1.0f,0.0f);</span><br><span class="line">glEnd();</span><br></pre></td></tr></table></figure><hr><p><strong>下面是一个完整例子：</strong></p><blockquote><p>3D场景绘制2D透明缩放矩阵信息面板</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;gl/glut.h&gt;</span><br><span class="line"></span><br><span class="line">//输出模式，0-单缓存模式；非0双缓存模式</span><br><span class="line">#define OUTPUT_MODE 1</span><br><span class="line"></span><br><span class="line">float scale = 0.0;</span><br><span class="line">bool add = true;</span><br><span class="line"></span><br><span class="line">unsigned char axle = &apos;x&apos;;</span><br><span class="line"></span><br><span class="line">void init(void)</span><br><span class="line">&#123;</span><br><span class="line">//glClearColor函数设置好清除颜色，glClear利用glClearColor函数设置好的当前清除颜色设置窗口颜色</span><br><span class="line">glClearColor(1.0, 1.0, 0.8, 1.0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void display(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;scale=%f, axle=%c\n&quot;, scale, axle);</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">//配置缩放比例大小scale</span><br><span class="line">scale = (add ? scale + 0.1 : scale - 0.1);</span><br><span class="line">if (scale &gt;= 2.0)</span><br><span class="line">&#123;</span><br><span class="line">add = false;</span><br><span class="line">&#125;</span><br><span class="line">else if (scale &lt;= 0.0) &#123;</span><br><span class="line">add = true;</span><br><span class="line">&#125;</span><br><span class="line">//开始绘画</span><br><span class="line">glPushMatrix();</span><br><span class="line">&#123;</span><br><span class="line">if (axle == &apos;x&apos;) &#123;</span><br><span class="line">glScalef(scale, 1, 1);</span><br><span class="line">&#125;</span><br><span class="line">else if (axle == &apos;y&apos;) &#123;</span><br><span class="line">glScalef(1, scale, 1);</span><br><span class="line">&#125;</span><br><span class="line">else if (axle == &apos;z&apos;) &#123;</span><br><span class="line">glScalef(1, 1, scale);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">glScalef(scale, scale, scale);</span><br><span class="line">&#125;</span><br><span class="line">glColor3f(1.0, 0.0, 1.0); //画笔梅红色</span><br><span class="line">glBegin(GL_POLYGON);</span><br><span class="line">glVertex2f(-0.2, -0.2);</span><br><span class="line">glVertex2f(-0.2, 0.2);</span><br><span class="line">glVertex2f(0.2, 0.2);</span><br><span class="line">glVertex2f(0.2, -0.2);</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br><span class="line">glPopMatrix();</span><br><span class="line"></span><br><span class="line">glLoadIdentity();  //加载单位矩阵</span><br><span class="line">glColor3f(0.0, 0.0, 1.0); //画笔蓝色</span><br><span class="line">  //--------画直线START--------</span><br><span class="line">  //画直线</span><br><span class="line">glBegin(GL_LINES);</span><br><span class="line">glVertex2f(-0.5, 0);</span><br><span class="line">glVertex2f(0.5, 0);</span><br><span class="line">glVertex2f(0, 0.5);</span><br><span class="line">glVertex2f(0, -0.5);</span><br><span class="line">glEnd();</span><br><span class="line">//--------画直线E N D--------</span><br><span class="line"></span><br><span class="line">if (OUTPUT_MODE == 0) &#123;</span><br><span class="line">glFlush();//单缓存GLUT_SINGLE时使用</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">glutSwapBuffers();//因为使用的是双缓存GLUT_DOUBLE，所以这里必须要交换缓存才会显示</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sleep(50);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reshape(int w, int h)</span><br><span class="line">&#123;</span><br><span class="line">int offset = 50;</span><br><span class="line">int dis = (w &gt; h ? h : w) - offset * 2;</span><br><span class="line"></span><br><span class="line">//配置显示物体屏幕的大小</span><br><span class="line">glViewport(offset, offset, (GLsizei)dis, (GLsizei)dis);</span><br><span class="line">printf(&quot;reshape: w=%d, h=%d, dis=%d\n&quot;, w, h, dis);</span><br><span class="line"></span><br><span class="line">glMatrixMode(GL_PROJECTION);</span><br><span class="line">glLoadIdentity();</span><br><span class="line"></span><br><span class="line">glOrtho(-1.5, 1.5, -1.5, 1.5, 0, 10);</span><br><span class="line">//gluOrtho2D(-1.5, 1.5, -1.5, 1.5);</span><br><span class="line"></span><br><span class="line">glMatrixMode(GL_MODELVIEW);</span><br><span class="line">glLoadIdentity();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void keyboard(unsigned char key, int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">switch (key) &#123;</span><br><span class="line">case &apos;x&apos;:</span><br><span class="line">case &apos;X&apos;:</span><br><span class="line">axle = &apos;x&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">case &apos;y&apos;:</span><br><span class="line">case &apos;Y&apos;:</span><br><span class="line">axle = &apos;y&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">case &apos;z&apos;:</span><br><span class="line">case &apos;Z&apos;:</span><br><span class="line">axle = &apos;z&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">case &apos;a&apos;:</span><br><span class="line">case &apos;A&apos;:</span><br><span class="line">axle = &apos;a&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;按键%c\n&quot;, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;可通过按键xyza控制图形按哪一轴缩放\n&quot;);</span><br><span class="line">glutInit(&amp;argc, argv);</span><br><span class="line"></span><br><span class="line">glutInitDisplayMode(GLUT_RGB | (OUTPUT_MODE == 0 ? GLUT_SINGLE : GLUT_DOUBLE));</span><br><span class="line">glutInitWindowPosition(100, 100);</span><br><span class="line">glutInitWindowSize(400, 400);</span><br><span class="line">glutCreateWindow(&quot;第一个 OpenGL 程序&quot;);</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">glutDisplayFunc(&amp;display);</span><br><span class="line">glutIdleFunc(display);       //程序空闲的时候调用display（设置不断调用显示函数）</span><br><span class="line">glutReshapeFunc(reshape);</span><br><span class="line">//glutKeyboardFunc(keyboard);</span><br><span class="line">glutMainLoop();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图<br><img src="http://img.blog.csdn.net/20170226003537334?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先展示一张OpenGL画的旋转茶壶：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180331202805170?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OpenGL简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是在SGI等多家世界闻名的计算机公司的倡导下，以SGI的GL三维图形库为基础制定的一个通用共享的开放式三维图形标准。是图形硬件的一个软件接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OpenGL特点&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="图像处理" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
      <category term="3D" scheme="http://yoursite.com/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/30/hello-world/"/>
    <id>http://yoursite.com/2018/03/30/hello-world/</id>
    <published>2018-03-30T02:07:22.522Z</published>
    <updated>2018-03-30T02:07:22.522Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
