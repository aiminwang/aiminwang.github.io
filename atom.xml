<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aimin-Wang</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-30T08:29:14.638Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aimin Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL 叩开3D的心扉</title>
    <link href="http://yoursite.com/2018/03/30/OpenGL-%E5%8F%A9%E5%BC%803D%E7%9A%84%E5%BF%83%E6%89%89/"/>
    <id>http://yoursite.com/2018/03/30/OpenGL-叩开3D的心扉/</id>
    <published>2018-03-30T08:10:15.000Z</published>
    <updated>2018-03-30T08:29:14.638Z</updated>
    
    <content type="html"><![CDATA[<p><strong>先展示一张OpenGL画的旋转茶壶：</strong></p><p><img src="http://img.blog.csdn.net/20180330162734850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>OpenGL简介</strong></p><p>是在SGI等多家世界闻名的计算机公司的倡导下，以SGI的GL三维图形库为基础制定的一个通用共享的开放式三维图形标准。是图形硬件的一个软件接口。</p><p><strong>OpenGL特点</strong></p><p>OpenGL是一个开放的三维图形软件包，它独立于窗口系统和操作系统，以它为基础开发的应用程序可以十分方便地在各种平台间移植。<br>OpenGL可以与Visual C++紧密接口，便于实现有关计算和图形算法，可保证算法的正确性和可靠性。<br> OpenGL使用简便，效率高。 </p><p><strong>vs环境下OpenGL函数库配置</strong></p><p>加载glut库<br>把过glut32.lib拷贝到VC的安装目录下的lib文件夹中：如D:\Program Files\Microsoft Visual Studio\VC98\Lib<br>把glut.h拷贝到VC的安装目录下的Include\GL文件夹中：如：D:\Program Files\Microsoft Visual Studio\VC98\Include\GL<br>把glut32.dll拷贝到C:\WINDOWS\system32</p><p><strong>OpenGL函数的命名规则</strong></p><p>一般的函数命名如下：<br>&lt;前缀&gt;&lt;根函数&gt;&lt;参数数目&gt;&lt;参数类型&gt;</p><p>前缀有gl、glu、aux、glut、wgl、glx、agl等等，分别表示该函数属于OpenGL那个开发库等。所谓开发库，要知道原生的OpenGL是跨平台的，跨平台意味着很多功能是无法实现的，比如说Windows和X-Window的窗口实现机制是不同的，OpenGL并不关心这些东西，只管画图。所以，OpenGL并没有窗口函数，比如无法创建窗口，无法获得输入……这些东西都需要其他的函数库来实现。用OpenGL常用的工具函数库来实现。</p><p>我们主要使用两种，一个是GLU库，它提供了比较基础的命令的封装，可以很简单的实现比较多的复杂功能；而另外一个就是GLUT，glut是不依赖于窗口平台的OpenGL工具包，目的是隐藏不同窗口平台API的复杂度，提供更为复杂的绘制功能，我们会大量的使用它。</p><p>OpenGL内部数据都是以float的形式存放的，如果使用double会对性能有一定的影响。</p><hr><p><strong>初始化窗口</strong></p><p><code>glutInit()</code> 是用glut来初始化OpenGL的，所有的问题都交给这个函数吧，基本不用管，虽说可以接受参数的，基本无用。</p><p><code>glutInitDisplayMode(MODE)</code> 非常重要，这里告诉系统我们需要一个怎样显示模式。至于其参数GLUT_RGBA就是使用(red, green, blue)的颜色系统。有没有写错？这里有个A啊，不应该是(red, green, blue, alpha)么？大概是历史原因，GLUT_RGBA和GLUT_RGB是其实是等价的（坑爹啊），要想实现Alpha还得用其他的参数。而GLUT_SINGLE意味着所有的绘图操作都直接在显示的窗口执行，相对的，我们还有一个双缓冲的窗口，对于动画来说非常合适。</p><p><code>glutInitWindowSize(400, 400)</code> 这个函数很容易理解，设置出现的窗口的大小。实际上还有个glutInitWindowPosition()也很常用，用来设置窗口出现的位置。</p><p><code>glutCreateWindow(“First”)</code> ，一旦调用了，就出现一个窗口了，参数就是窗口的标题。</p><p><code>glutDisplayFunc(func)</code> 是glut非常讨人喜欢的一个功能，它注册了一个函数，用来绘制OpenGL窗口，这个函数里就写着很多OpenGL的绘图操作等命令，也就是我们主要要学习的东西。</p><p><code>glutMainLoop()</code> ，主循环，一旦调用了，我们的OpenGL就一直运行下去了。和很多程序中的主循环一样，不停的运行，画出即时的图像，处理输入等。</p><hr><p><strong>绘图</strong></p><p>看看drawFunc里的几句话，这里是实际绘图的函数。</p><p><code>glClear(GL_COLOR_BUFFER_BIT)</code> 是把先前的画面给清除，这基本是定律，每次重绘之前都要把原来的画面擦除，否则叠加起来什么都看不出了。glClear一看就知道是OpenGL原生的命令，而参数就是指明要清除的buffer。大家一定会有疑问，我们清除，不就是清除屏幕上的画面么，为什么还要指定？OpenGL的博大精深这里就体现出来了，buffer不仅仅有我们看到的那个GL_COLOR_BUFFER_BIT，OpenGL中还有其他的buffer类型，我们会在后面的章节讲到。</p><p><code>glutWireTeapot(0.5)</code> 是glut提供的绘制犹他茶壶的工具函数，茶壶还是相当复杂的一个几何体，用这个函数一下子就画出来了，不过基本也就演示用用。这里是用的线模型，因为没有说光照和材质，如果glutSolidTeapot()画出来就成纸片儿了。</p><p><code>glFlush()</code> 似乎不用多说，画了那么多，自然要刷新一下显示。不过，这里的刷新不仅仅是屏幕上的更新，实际上，它是处理OpenGL的渲染流水线，让所有排队中的命令得到执行。OpenGL的渲染流水线是一个很重要的概念，不过这里暂时还不打算多说明，否则对初学者来说，未免有些麻烦了。<br><code>glutSwapBuffers();</code> 交换缓冲区（使用双缓存GLUT_DOUBLE，必须交换缓存才能显示）</p><hr><p><strong>小惊喜</strong></p><blockquote><p><code>glutIdleFunc(Func)</code> 又是一个激动人心的函数，可以让OpenGL在闲暇之余，调用一下注册的函数，这是是产生动画的绝好方法<br><code>gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);</code><br>//定义一个视图矩阵，并与当前矩阵相乘（实现漫游）</p></blockquote><pre><code> void gluLookAt(GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz);该 函数定义一个视图 矩阵，并与当前矩阵相乘。第一组eyex, eyey, eyez 相机在世界坐标的位置第二组centerx, centery, centerz 相机镜头对准的物体在世界坐标的位置第三组upx, upy, upz 相机向上的方向在世界坐标中的方向你把相机想象成为你自己的脑袋：第一组数据就是脑袋的位置第二组数据就是眼睛看的物体的位置第三组就是头顶朝向的方向（因为你可以歪着头看同一个物体）OpenGL中维持着两套矩阵，一个是模型视图矩阵（model view matrix），另一个是投影矩阵（projection matrix）。通过对OpenGL这两套矩阵的变换，我们可以得到各种投影效果</code></pre><p><strong>一些常用函数</strong></p><blockquote><p><code>glColor3f(1.0, 0.0, 0.0);</code>                       //画笔红色<br><code>glutReshapeFunc(reshape);</code>               //窗口发生改变再渲染<br><code>glutMouseFunc(mouse);</code><br><code>glutMotionFunc(motion);</code><br>//处理当鼠标键摁下时，鼠标拖动的事件。当鼠标拖动时，将每一帧都调用一次这个函数 glLoadIdentity();<br>//重置当前模型观察矩阵</p><p><code>glPushMatrix();</code><br>//把刚刚的那个位置和角度保存进栈中（主要用于平移，旋转，缩放等）保存当前模型视图 glPopMatrix();<br>//根据保存的值恢复出位置，角度等 glRotatef(anglex, 1.0, 0.0, 0.0);<br>//以（x,y,z）向量为旋转轴旋转angle度 glScalef(1.0,1.0,1.0);<br>//每一点坐标分别乘以x,y,z倍(缩放)</p><p><code>glViewport(0, 0, (GLsizei)w, (GLsizei)h);</code><br>//负责把视景体截取的图像按照怎样的高和宽显示到屏幕上     glMatrixMode(GL_PROJECTION);<br>//设置当前矩阵模式：对投影矩阵应用随后的矩阵操作  与glLoadIdentity()一同使用<br><code>glLoadIdentity();</code><br>  //重置当前模型观察矩阵：将当前的用户坐标系的原点移到了屏幕中心 &gt;<code>&gt;</code>gluPerspective(60.0, (GLfloat)w /(GLfloat)h, 1.0, 20.0);<code>//创建一个投影矩阵并且与当前矩阵相乘,得到的矩阵设定为当前变换，但要先通过glMatrixMode设定成投影矩阵才会得到想要的投影矩阵变换</code> glMatrixMode(GL_MODELVIEW);  <code>//设置当前矩阵模式：对模型视景矩阵堆栈应用随后的矩阵操作 另GL_TEXTURE参数,是对纹理矩阵堆栈应用随后的矩阵操作</code> glLoadIdentity();         <code>//重置当前模型观察矩阵：将当前的用户坐标系的原点移到了屏幕中心</code> gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0,0.0, 0.0, 1.0, 0.0);`<br>  //定义一个视图  与当阵相乘（）</p></blockquote><hr><p><strong>用OpenGL编写程序的模板基本模板</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//主函数</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">   glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);        //设置显示模式（颜色、缓冲区等）</span><br><span class="line">glutCreateWindow(“A Simple Example”); //创建窗口</span><br><span class="line">    SetupRC();                      //初始化渲染环境</span><br><span class="line">glutDisplayFunc(RenderScene);  //调用场景渲染函数</span><br><span class="line">    glutReshapeFunc(ChangeSize);   //窗口发生变化</span><br><span class="line">glutMainLo();                  //程序开始事件处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>几何图元的绘制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">glBegin(GL_TRIANGLES);      //三角形</span><br><span class="line">glVertex3f(0.0f,1.0f,0.0f);</span><br><span class="line">glVertex3f(-1.0f,-1.0f,0.0f);</span><br><span class="line">glVertex3f(1.0f,-1.0f,0.0f);</span><br><span class="line">glEnd();</span><br><span class="line">glBegin(GL_QUADS);           //四边形</span><br><span class="line">glVertex3f(-1.0f,1.0f,0.0f);</span><br><span class="line">glVertex3f(1.0f,1.0f,0.0f);</span><br><span class="line">glVertex3f(1.0f,-1.0f,0.0f);</span><br><span class="line">glVertex3f(-1.0f,-1.0f,0.0f);</span><br><span class="line">glEnd();</span><br></pre></td></tr></table></figure><hr><p><strong>下面是一个完整例子：</strong></p><blockquote><p>3D场景绘制2D透明缩放矩阵信息面板</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;gl/glut.h&gt;</span><br><span class="line"></span><br><span class="line">//输出模式，0-单缓存模式；非0双缓存模式</span><br><span class="line">#define OUTPUT_MODE 1</span><br><span class="line"></span><br><span class="line">float scale = 0.0;</span><br><span class="line">bool add = true;</span><br><span class="line"></span><br><span class="line">unsigned char axle = &apos;x&apos;;</span><br><span class="line"></span><br><span class="line">void init(void)</span><br><span class="line">&#123;</span><br><span class="line">//glClearColor函数设置好清除颜色，glClear利用glClearColor函数设置好的当前清除颜色设置窗口颜色</span><br><span class="line">glClearColor(1.0, 1.0, 0.8, 1.0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void display(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;scale=%f, axle=%c\n&quot;, scale, axle);</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">//配置缩放比例大小scale</span><br><span class="line">scale = (add ? scale + 0.1 : scale - 0.1);</span><br><span class="line">if (scale &gt;= 2.0)</span><br><span class="line">&#123;</span><br><span class="line">add = false;</span><br><span class="line">&#125;</span><br><span class="line">else if (scale &lt;= 0.0) &#123;</span><br><span class="line">add = true;</span><br><span class="line">&#125;</span><br><span class="line">//开始绘画</span><br><span class="line">glPushMatrix();</span><br><span class="line">&#123;</span><br><span class="line">if (axle == &apos;x&apos;) &#123;</span><br><span class="line">glScalef(scale, 1, 1);</span><br><span class="line">&#125;</span><br><span class="line">else if (axle == &apos;y&apos;) &#123;</span><br><span class="line">glScalef(1, scale, 1);</span><br><span class="line">&#125;</span><br><span class="line">else if (axle == &apos;z&apos;) &#123;</span><br><span class="line">glScalef(1, 1, scale);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">glScalef(scale, scale, scale);</span><br><span class="line">&#125;</span><br><span class="line">glColor3f(1.0, 0.0, 1.0); //画笔梅红色</span><br><span class="line">glBegin(GL_POLYGON);</span><br><span class="line">glVertex2f(-0.2, -0.2);</span><br><span class="line">glVertex2f(-0.2, 0.2);</span><br><span class="line">glVertex2f(0.2, 0.2);</span><br><span class="line">glVertex2f(0.2, -0.2);</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br><span class="line">glPopMatrix();</span><br><span class="line"></span><br><span class="line">glLoadIdentity();  //加载单位矩阵</span><br><span class="line">glColor3f(0.0, 0.0, 1.0); //画笔蓝色</span><br><span class="line">  //--------画直线START--------</span><br><span class="line">  //画直线</span><br><span class="line">glBegin(GL_LINES);</span><br><span class="line">glVertex2f(-0.5, 0);</span><br><span class="line">glVertex2f(0.5, 0);</span><br><span class="line">glVertex2f(0, 0.5);</span><br><span class="line">glVertex2f(0, -0.5);</span><br><span class="line">glEnd();</span><br><span class="line">//--------画直线E N D--------</span><br><span class="line"></span><br><span class="line">if (OUTPUT_MODE == 0) &#123;</span><br><span class="line">glFlush();//单缓存GLUT_SINGLE时使用</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">glutSwapBuffers();//因为使用的是双缓存GLUT_DOUBLE，所以这里必须要交换缓存才会显示</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sleep(50);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reshape(int w, int h)</span><br><span class="line">&#123;</span><br><span class="line">int offset = 50;</span><br><span class="line">int dis = (w &gt; h ? h : w) - offset * 2;</span><br><span class="line"></span><br><span class="line">//配置显示物体屏幕的大小</span><br><span class="line">glViewport(offset, offset, (GLsizei)dis, (GLsizei)dis);</span><br><span class="line">printf(&quot;reshape: w=%d, h=%d, dis=%d\n&quot;, w, h, dis);</span><br><span class="line"></span><br><span class="line">glMatrixMode(GL_PROJECTION);</span><br><span class="line">glLoadIdentity();</span><br><span class="line"></span><br><span class="line">glOrtho(-1.5, 1.5, -1.5, 1.5, 0, 10);</span><br><span class="line">//gluOrtho2D(-1.5, 1.5, -1.5, 1.5);</span><br><span class="line"></span><br><span class="line">glMatrixMode(GL_MODELVIEW);</span><br><span class="line">glLoadIdentity();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void keyboard(unsigned char key, int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">switch (key) &#123;</span><br><span class="line">case &apos;x&apos;:</span><br><span class="line">case &apos;X&apos;:</span><br><span class="line">axle = &apos;x&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">case &apos;y&apos;:</span><br><span class="line">case &apos;Y&apos;:</span><br><span class="line">axle = &apos;y&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">case &apos;z&apos;:</span><br><span class="line">case &apos;Z&apos;:</span><br><span class="line">axle = &apos;z&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">case &apos;a&apos;:</span><br><span class="line">case &apos;A&apos;:</span><br><span class="line">axle = &apos;a&apos;;</span><br><span class="line">glutPostRedisplay();</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;按键%c\n&quot;, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;可通过按键xyza控制图形按哪一轴缩放\n&quot;);</span><br><span class="line">glutInit(&amp;argc, argv);</span><br><span class="line"></span><br><span class="line">glutInitDisplayMode(GLUT_RGB | (OUTPUT_MODE == 0 ? GLUT_SINGLE : GLUT_DOUBLE));</span><br><span class="line">glutInitWindowPosition(100, 100);</span><br><span class="line">glutInitWindowSize(400, 400);</span><br><span class="line">glutCreateWindow(&quot;第一个 OpenGL 程序&quot;);</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">glutDisplayFunc(&amp;display);</span><br><span class="line">glutIdleFunc(display);       //程序空闲的时候调用display（设置不断调用显示函数）</span><br><span class="line">glutReshapeFunc(reshape);</span><br><span class="line">//glutKeyboardFunc(keyboard);</span><br><span class="line">glutMainLoop();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图<br><img src="http://img.blog.csdn.net/20170226003537334?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ3Nzc2MDA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;先展示一张OpenGL画的旋转茶壶：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180330162734850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5u
      
    
    </summary>
    
      <category term="图像处理" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="OpenGL" scheme="http://yoursite.com/tags/OpenGL/"/>
    
      <category term="3D" scheme="http://yoursite.com/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Test again</title>
    <link href="http://yoursite.com/2018/03/30/Test-again/"/>
    <id>http://yoursite.com/2018/03/30/Test-again/</id>
    <published>2018-03-30T07:50:24.000Z</published>
    <updated>2018-03-30T07:53:08.185Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Test-article</title>
    <link href="http://yoursite.com/2018/03/30/Test-article/"/>
    <id>http://yoursite.com/2018/03/30/Test-article/</id>
    <published>2018-03-30T07:35:05.000Z</published>
    <updated>2018-03-30T07:38:16.787Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
      <category term="文章" scheme="http://yoursite.com/categories/others/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/30/hello-world/"/>
    <id>http://yoursite.com/2018/03/30/hello-world/</id>
    <published>2018-03-30T02:07:22.522Z</published>
    <updated>2018-03-30T02:07:22.522Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
